{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.
  - picker_type: {String} type of picker to dispay


  Usage:
  {% render 'product-variant-options',
    product: product,
    option: option,
    block: block
    picker_type: picker_type
  %}
{% endcomment %}
{%- liquid
  assign product_form_id = 'product-form-' | append: section.id
-%}

{%- for value in option.values -%}
  {%- liquid
    assign swatch_focal_point = null
    if value.swatch.image
      assign image_url = value.swatch.image | image_url: width: 50
      assign swatch_value = 'url(' | append: image_url | append: ')'
      assign swatch_focal_point = value.swatch.image.presentation.focal_point
    elsif value.swatch.color
      assign swatch_value = 'rgb(' | append: value.swatch.color.rgb | append: ')'
    else
      assign swatch_value = null
    endif

    assign option_disabled = true
    if value.available
      assign option_disabled = false
    endif
  -%}

  {%- capture input_id -%}
    {{ section.id }}-{{ option.position }}-{{ forloop.index0 -}}
  {%- endcapture -%}

  {%- capture input_name -%}
    {{ option.name }}-{{ option.position }}
  {%- endcapture -%}

  {%- capture input_dataset -%}
    data-product-url="{{ value.product_url }}"
    data-option-value-id="{{ value.id }}"
  {%- endcapture -%}

  {%- capture label_unavailable -%}
    <span class="visually-hidden label-unavailable">
      {{- 'products.product.variant_sold_out_or_unavailable' | t -}}
    </span>
  {%- endcapture -%}

  {%- if picker_type == 'swatch' -%}
    {%- capture help_text -%}
      <span class="visually-hidden">{{ value | escape }}</span>
      {{ label_unavailable }}
    {%- endcapture -%}
    {%
      render 'swatch-input',
      id: input_id,
      name: input_name,
      value: value | escape,
      swatch: value.swatch,
      product_form_id: product_form_id,
      checked: value.selected,
      visually_disabled: option_disabled,
      shape: block.settings.swatch_shape,
      help_text: help_text,
      additional_props: input_dataset
    %}

  {%- elsif picker_type == 'button' -%}
    <input
      type="radio"
      id="{{ input_id }}"
      name="{{ input_name | escape }}"
      value="{{ value | escape }}"
      form="{{ product_form_id }}"
      {% if value.selected %}
        checked
      {% endif %}
      {% if option_disabled %}
        class="disabled"
      {% endif %}
      {{ input_dataset }}
    >
    <label for="{{ input_id }}">
      {{ value -}}
      {{ label_unavailable }}
    </label>
  {%- elsif picker_type == 'dropdown' or picker_type == 'swatch_dropdown' -%}
    <option
      id="{{ input_id }}"
      value="{{ value | escape }}"
      {% if value.selected %}
        selected="selected"
      {% endif %}
      {% if swatch_value and picker_type == 'swatch_dropdown' %}
        data-option-swatch-value="{{ swatch_value }}"
        {% if swatch_focal_point %}
          data-option-swatch-focal-point="{{ swatch_focal_point }}"
        {% endif %}
      {% endif %}
      {{ input_dataset }}
    >
      {% if option_disabled -%}
        {{- 'products.product.value_unavailable' | t: option_value: value -}}
      {%- else -%}
        {{- value -}}
      {%- endif %}
    </option>
  {%- endif -%}
{%- endfor -%}
<script>
  (function() {
    // Link the Liquid to JS
    const variants = [
      {% for variant in product.variants %}
      {
        id: {{ variant.id }},
        value: '{{ variant.title }}',
        inventory_quantity: {{ variant.inventory_quantity }},
        metafields: {
          custom: [
            {% assign metafields = variant.metafields.custom %}
            {% for item in metafields %}
              "{{ item[1] }}"{% if forloop.last == false %},{% endif %}
            {% endfor %}
          ]
        }
      }{% if forloop.last == false %},{% endif %} //comma for non-last object, formatting issues
      {% endfor %}
    ];
    
    function updateGreetingCardMessage() {
      const greetingCardChecked = document.querySelector('input[type="radio"][value="With Greeting Card"]:checked');
      const messageArea = document.querySelector('#message');
      const messageSubmission = document.querySelector('#messageSubmission');
      const presetMessage = messageSubmission ? messageSubmission.value : '';
  
      if (greetingCardChecked) {
          if (messageArea) {
              messageArea.innerHTML = `
                  <label for="custom-word">Enter your greeting card's message:</label>
                  <textarea id="greeting-message">${presetMessage}</textarea>
              `;
              logMessageValue();
          } else {
              console.error('Element #message not found');
          }
      } else {
          if (messageArea) {
              messageArea.innerHTML = ``;
              if (messageSubmission) {
                  messageSubmission.value = '';  // Ensure messageSubmission is set to empty
              } else {
                  console.error('Element #messageSubmission not found');
              }
          } else {
              console.error('Element #message not found');
          }
      }
  }
  
  function logMessageValue() {
      const message = document.querySelector('#greeting-message');
      if (message) {
          message.addEventListener('change', handleMessageChange);
      } else {
          console.error('Element #greeting-message not found');
      }
  }
  
  function handleMessageChange(event) {
      const messagePass = event.target.value;
      const messageSubmission = document.querySelector('#messageSubmission');
  
      if (messageSubmission) {
          messageSubmission.value = messagePass;
      } else {
          console.error('Element #messageSubmission not found');
      }
  }
  
  function detectPresetValue() {
      const greetingCardChecked = document.querySelector('input[type="radio"][value="With Greeting Card"]:checked');
      if (greetingCardChecked) {
          updateGreetingCardMessage();
      }
  }
  
    const radioButtonsMsg = document.querySelectorAll('input[type="radio"][name*="Greeting"]');
    radioButtonsMsg.forEach(radio => {
      radio.addEventListener('change', updateGreetingCardMessage);
    });
    
    // Call the function to detect preset value on page load
    document.addEventListener('DOMContentLoaded', (event) => {
      detectPresetValue();
    });
    

    function handleRadioButtonClick(event) {
      
      const selectedRadios = document.querySelectorAll('input[type="radio"]:checked');
      let selectedValue = ''; 
      selectedRadios.forEach(radio => {
        selectedValue+= radio.value + ' / ';
      });
      
      const selectedVariant = variants.find(variant => variant.value === selectedValue.slice(0, -3));
      const metafieldSize = selectedVariant ? selectedVariant.metafields.custom.join(''): 'Unknown Size';
      const inventoryQuantity = selectedVariant ? selectedVariant.inventory_quantity : 'Unknown Number';
      

      // put into display area
      const displayArea = document.querySelector('#tasks');
      if (displayArea) {
        let inventoryMessage = '';
        if (inventoryQuantity > 4) {
          inventoryMessage = ` Available!(${inventoryQuantity})`;
        } else {
          inventoryMessage = `Low stock(${inventoryQuantity})`;
        }

        displayArea.innerHTML = `
          <p>${metafieldSize}</p>
          <p>${inventoryMessage}</p>
        `;
      }
    }

    // Call the function when being clicked

      const radioButtons = document.querySelectorAll('input[type="radio"]');
      radioButtons.forEach(function (radioButton) {
        radioButton.addEventListener('click', handleRadioButtonClick);
      });

  })();
</script>
